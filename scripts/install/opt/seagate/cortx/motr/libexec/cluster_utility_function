#!/usr/bin/env bash
set -eu -o pipefail
export PS4='+ [${BASH_SOURCE[0]##*/}:${LINENO}${FUNCNAME[0]:+:${FUNCNAME[0]}}] '
# set -x

PROG=${0##*/}

usage() {
    cat <<EOF
Usage: $PROG [OPTS] <CDF> [<params.yaml>]

Formats EES Cortx MOTR storage.

Here are some prerequisites/guidelines:

* Password-less ssh access between the nodes is required.
* Cortx MOTR is installed.

* The script should be run from the "left" node.

Mandatory parameters:
  --ip1           <addr>    1st roaming IP address
  --ip2           <addr>    2nd roaming IP address.
  --left-node     <n1>      Left  node hostname (default: pod-c1)
  --right-node    <n2>      Right node hostname (default: pod-c2)
                  <CDF>     Hare Cluster Description File

Optional parameters:
  --start-consul                        start consul
  --stop-consul                         stop  consul
  --get-fid <service-name> <node-name>  get fid of service
Note: parameters can be specified either directly via cmd-line options
or via a yaml file, e.g.:

  ip1: <ip>
  ip2: <ip2>
  left-node: <lnode>
  right-node: <rnode>
EOF
}

TEMP=$(getopt --options h,i: \
              --longoptions help,ip1:,ip2: \
              --longoptions left-node:,right-node: \
              --longoptions start-consul \
              --longoptions stop-consul \
              --longoptions get-fid \
              --name "$PROG" -- "$@" || true)

(($? == 0)) || { usage >&2; exit 1; }

eval set -- "$TEMP"

ip1=
ip2=
liface=eth1
riface=eth1
net_type=tcp
lnode=pod-c1
rnode=pod-c2
mkfs_only=
single_node=false
start_consul_only=
stop_consul_only=
get_fid_only=

while true; do
    case "$1" in
        -h|--help)           usage; exit ;;
        --ip1)               ip1=$2; shift 2 ;;
        --ip2)               ip2=$2; shift 2 ;;
        -i|--interface)      liface=riface=$2; shift 2 ;;
        --left-iface)        left_iface=$2; shift 2 ;;
        --right-iface)       right_iface=$2; shift 2 ;;
        -liface)             liface=$2; shift 2 ;;
        -riface)             riface=$2; shift 2 ;;
        --net-type)          net_type=$2; shift 2 ;;
        --left-node)         lnode=$2; shift 2 ;;
        --right-node)        rnode=$2; shift 2 ;;
        --start-consul)      start_consul_only=true; shift ;;
        --stop-consul)       stop_consul_only=true; shift  ;;
        --get-fid)           get_fid_only=true; shift ;;
        --)                  shift; break ;;
        *)                   break ;;
    esac
done

cdf=${1:-}
argsfile=${2:-}

hare_dir=/var/lib/hare

die() {
    echo "$PROG: ERROR: $*" >&2
    exit 1
}

# Read Virtual ip, node and meta data information from args file.
if [[ -f $argsfile ]]; then
    while IFS=': ' read name value; do
       case $name in
           ip1)          ip1=$value     ;;
           ip2)          ip2=$value     ;;
           interface)    liface=riface=$value   ;;
           left-iface)   liface=$value   ;;
           right-iface)  riface=$value   ;;
           net-type)     net_type=$value ;;
           left-node)    lnode=$value   ;;
           right-node)   rnode=$value   ;;
       esac
    done < $argsfile
fi

[[ $ip1 ]] && [[ $ip2 ]] && [[ $cdf ]]  || {
    usage >&2
    exit 1
}

get_fid() {
    service=$1
    node=$2

    # wait until consul becomes available for returning the data
    while ! [[ `/opt/seagate/cortx/hare/bin/consul kv get --recurse m0conf/nodes/$node/processes | grep $service` ]]
    do
        echo "Trying to fetch fid again"
        sleep 2
    done

    proc_id=$(/opt/seagate/cortx/hare/bin/consul kv get --recurse \
              m0conf/nodes/$node/processes | grep $service | \
              awk 'BEGIN {FS="/"} {print $5}')
    fid=$(printf '0x7200000000000001:0x%x\n' $proc_id)
    echo $fid
}

run_cmd() {
    local node=$1; shift
    local cmd=$*
    ssh $node $cmd
}

get_leader() {
    /opt/seagate/cortx/hare/bin/consul kv get leader
}

start_consul() {
    local node1=$lnode
    local node2=$rnode
    if $single_node; then
        node1=$(/opt/seagate/cortx/hare/libexec/node-name)
        node2=$(/opt/seagate/cortx/hare/libexec/node-name)
    fi

    echo 'Adding ip addresses..'
    run_cmd $node1 "sudo ifconfig $liface:c1 $ip1"
    run_cmd $node2 "sudo ifconfig $riface:c2 $ip2"

    echo 'Adding lnet interfaces..'
    # Its possible that lnet module is not loaded.
    run_cmd $node1 "sudo modprobe lnet"
    run_cmd $node2 "sudo modprobe lnet"

    run_cmd $node1 "sudo lnetctl net add --net $net_type --if $liface:c1"
    run_cmd $node2 "sudo lnetctl net add --net $net_type --if $riface:c2"

    echo 'Restarting motr-kernel..'
    run_cmd $node1 "sudo systemctl restart motr-kernel"
    run_cmd $node2 "sudo systemctl restart motr-kernel"

    echo 'Modifying Consul systemd units..'
    run_cmd $node1 "sudo sed -i 's/^\(ExecStartPost\|ExecStopPost\)=\/usr\/sbin\/attrd_updater/#&/' \
                        /usr/lib/systemd/system/hare-consul-agent-c1.service"
    run_cmd $node2 "sudo sed -i 's/^\(ExecStartPost\|ExecStopPost\)=\/usr\/sbin\/attrd_updater/#&/' \
                        /usr/lib/systemd/system/hare-consul-agent-c2.service"

    run_cmd $node1 "sudo systemctl reset-failed"
    run_cmd $node2 "sudo systemctl reset-failed"
    run_cmd $node1 "sudo systemctl daemon-reload"
    run_cmd $node2 "sudo systemctl daemon-reload"

    echo 'Starting Consul agents..'
    run_cmd $node1 "sudo systemctl start hare-consul-agent-c1"
    run_cmd $node2 "sudo systemctl start hare-consul-agent-c2"

    while [[ ($(get_leader) != $lnode) && ($(get_leader) != $rnode) ]]; do
        sleep 1
    done

    # An issue is observed if we try to fetch data from Consul immediately
    # after stating Consul services. So, let's wait till consul becomes available.
    sleep 10
    while ! [[ `/opt/seagate/cortx/hare/bin/consul kv get --recurse m0conf/nodes/srvnode-1 | grep confd` ]]
    do
        sleep 2
    done

    while ! [[ `/opt/seagate/cortx/hare/bin/consul kv get --recurse m0conf/nodes/srvnode-2 | grep confd` ]]
    do
        sleep 2
    done
    echo 'Started Consul agents..'
}

stop_consul() {
    local node1=$lnode
    local node2=$rnode
    if $single_node; then
        node1=$(/opt/seagate/cortx/hare/libexec/node-name)
        node2=$(/opt/seagate/cortx/hare/libexec/node-name)
    fi
		
    echo 'Stopping Consul agents..'
    run_cmd $node2 "sudo systemctl stop hare-consul-agent-c2"
    run_cmd $node1 "sudo systemctl stop hare-consul-agent-c1"

    echo 'Deleting lnet interfaces..'
    run_cmd $node1 "sudo lnetctl net del --net $net_type --if $liface:c1"
    run_cmd $node2 "sudo lnetctl net del --net $net_type --if $riface:c2"

    echo 'Restarting motr-kernel..'
    run_cmd $node1 "sudo systemctl restart motr-kernel"
    run_cmd $node2 "sudo systemctl restart motr-kernel"

    echo 'Restoring Consul systemd units..'
    run_cmd $node1 "sudo sed -i '/\(#ExecStartPost\|#ExecStopPost\)=\/usr\/sbin\/attrd_updater/s/#//g' \
                        /usr/lib/systemd/system/hare-consul-agent-c1.service"
    run_cmd $node2 "sudo sed -i '/\(#ExecStartPost\|#ExecStopPost\)=\/usr\/sbin\/attrd_updater/s/#//g' \
                        /usr/lib/systemd/system/hare-consul-agent-c2.service"

    run_cmd $node1 "sudo systemctl daemon-reload"
    run_cmd $node2 "sudo systemctl daemon-reload"
    run_cmd $node1 "sudo systemctl reset-failed"
    run_cmd $node2 "sudo systemctl reset-failed"

    echo 'Removing ipaddresses..'
    run_cmd $node1 "ip addr del $ip1/24 dev $liface:c1"
    run_cmd $node2 "ip addr del $ip2/24 dev $riface:c1"
}



if [[ $start_consul_only ]]; then
    start_consul
elif [[ $stop_consul_only ]]; then
    stop_consul
elif [[ $get_fid_only ]]; then
    get_fid $3 $4
else
    usage
fi
